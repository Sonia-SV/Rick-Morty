{"version":3,"sources":["components/Filters.js","components/Character.js","components/CharacterList.js","services/api.js","components/DetailedCharacter.js","components/App.js","index.js"],"names":["Filters","props","handleSearch","event","preventDefault","handleFilterCharacters","key","currentTarget","id","value","htmlFor","type","onChange","filterName","filterSpecies","Character","name","image","species","speciesType","to","src","alt","CharacterList","singleCharacter","characters","map","character","getDataFromApi","fetch","then","response","json","data","results","planet","origin","episodes","episode","length","status","DetailedCharacter","console","log","App","useState","setCharacters","setFilterName","setFilterSpecies","useEffect","sort","a","b","toLowerCase","localeCompare","JSON","parse","localStorage","getItem","setItem","stringify","exact","path","filter","includes","render","routeCharacterId","match","params","foundCharacter","find","parseInt","ReactDOM","document","querySelector"],"mappings":"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","file":"static/js/main.40b18bfa.chunk.js","sourcesContent":["import React from 'react';\nimport '../stylesheets/layout/filters.scss';\n\nconst Filters = (props) => {\n  const handleSearch = (event) => {\n    event.preventDefault();\n    props.handleFilterCharacters({\n      key: event.currentTarget.id,\n      value: event.currentTarget.value,\n    });\n  };\n  return (\n    <form>\n      <label htmlFor=\"name\">\n        Search a character:\n        <input id=\"name\" type=\"text\" onChange={handleSearch} value={props.filterName} />\n      </label>\n      <label htmlFor=\"species\">\n        Species:\n        <select id=\"species\" value={props.filterSpecies} onChange={handleSearch}>\n          <option value=\"All\">All</option>\n          <option value=\"Human\">Human</option>\n          <option value=\"Alien\">Alien</option>\n          {/* <option value=\"Humanoid\">Humanoid</option>\n          <option value=\"Unknown\">Unknown</option> */}\n        </select>\n      </label>\n    </form>\n  );\n};\n\nexport default Filters;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../stylesheets/layout/character.scss';\n\nconst Character = (props) => {\n  const { id, name, image, species, speciesType } = props;\n  return (\n    <li>\n      <Link to={`/character/${id}`}>\n        <h2>{name}</h2>\n        <img src={image} alt={name} />\n        <p>{species}</p>\n        <small>{speciesType !== '' ? `-${speciesType}-` : ''}</small>\n      </Link>\n    </li>\n  );\n};\n\nexport default Character;\n","import React from 'react';\nimport Character from './Character';\nimport '../stylesheets/layout/characterList.scss';\n\nconst CharacterList = (props) => {\n  const singleCharacter = props.characters.map((character) => {\n    return (\n      <Character\n        key={character.id}\n        id={character.id}\n        name={character.name}\n        species={character.species}\n        speciesType={character.speciesType}\n        image={character.image}\n      />\n    );\n  });\n  return <ul>{singleCharacter}</ul>;\n};\n\nexport default CharacterList;\n","const getDataFromApi = () => {\n  return fetch('https://rickandmortyapi.com/api/character/').then((response) =>\n    response.json().then((data) => {\n      return data.results.map((character) => {\n        return {\n          id: character.id,\n          image: character.image,\n          name: character.name,\n          species: character.species,\n          speciesType: character.type,\n          planet: character.origin.name,\n          episodes: character.episode.length,\n          status: character.status,\n        };\n      });\n    })\n  );\n};\n\nexport default getDataFromApi;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../stylesheets/layout/detailedCharacter.scss';\n\nconst DetailedCharacter = (props) => {\n  console.log(props);\n  const { id, name, species, image, planet, episodes, status } = props;\n  return (\n    <div>\n      <Link to=\"/\">Volver</Link>\n      <img src={image} alt={name} />\n      <p>{id}</p>\n      <p>{name}</p>\n      <p>{species}</p>\n      <p>{planet}</p>\n      <p>{episodes}</p>\n      <p>{status}</p>\n    </div>\n  );\n};\n\nexport default DetailedCharacter;\n","import React, { useEffect, useState } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Filters from './Filters';\n//import DetailedCharacter from './DetailedCharacter';\nimport CharacterList from './CharacterList';\nimport getDataFromApi from '../services/api';\nimport '../stylesheets/app.scss';\nimport DetailedCharacter from './DetailedCharacter';\n\ngetDataFromApi();\n\nconst App = () => {\n  const [characters, setCharacters] = useState([]);\n  const [filterName, setFilterName] = useState('');\n  const [filterSpecies, setFilterSpecies] = useState('All');\n\n  useEffect(() => {\n    getDataFromApi().then((data) => setCharacters(data.sort((a, b) => a.name.toLowerCase().localeCompare(b.name.toLowerCase()))));\n  }, []);\n\n  useEffect(() => {\n    const data = JSON.parse(localStorage.getItem('filter'));\n    if (data) {\n      setFilterName(data);\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem('filter', JSON.stringify(filterName));\n  });\n\n  const handleFilterCharacters = (data) => {\n    if (data.key === 'name') {\n      setFilterName(data.value);\n    }\n    if (data.key === 'species') {\n      setFilterSpecies(data.value);\n    }\n  };\n\n  const renderFilteredCharacters = () => {\n    return characters\n      .filter((character) => {\n        return character.name.toLowerCase().includes(filterName.toLowerCase());\n      })\n      .filter((character) => {\n        return filterSpecies === 'All' ? true : character.species === filterSpecies;\n      });\n  };\n\n  const renderDetailedCharacter = (props) => {\n    const routeCharacterId = props.match.params.id;\n    const foundCharacter = characters.find((character) => character.id === parseInt(routeCharacterId));\n    if (foundCharacter) {\n      return (\n        <DetailedCharacter\n          name={foundCharacter.name}\n          image={foundCharacter.image}\n          status={foundCharacter.status}\n          species={foundCharacter.species}\n          speciesType={foundCharacter.type}\n          planet={foundCharacter.planet}\n          episodes={foundCharacter.episodes}\n        />\n      );\n    } else {\n      return <p>Not found</p>;\n    }\n  };\n\n  return (\n    <div>\n      <Switch>\n        <Route exact path=\"/\">\n          <Filters handleFilterCharacters={handleFilterCharacters} filterName={filterName} filterSpecies={filterSpecies} />\n          <CharacterList characters={renderFilteredCharacters()} />\n        </Route>\n        <Route exact path=\"/character/:id\" render={renderDetailedCharacter} />\n      </Switch>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport App from './components/App';\nimport './stylesheets/index.scss';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.querySelector('#root')\n);\n"],"sourceRoot":""}